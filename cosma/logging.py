"""Production-ready logging capabilities for Cosma agents"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../01_logger.ipynb.

# %% auto 0
__all__ = ['AgentLogger', 'AgentMetrics']

# %% ../01_logger.ipynb 5
from .core import *
from fastcore.utils import *
from fastcore.basics import patch
import logging
import json
from pathlib import Path
from dataclasses import dataclass, field
from typing import Any, Optional, List, Callable, Dict


# %% ../01_logger.ipynb 6
@dataclass
class AgentLogger:
    """Structured logging for agent activities with console and file output.
    
    Args:
        name: Logger name (typically agent role)
        level: Logging level (default: INFO)
        log_dir: Optional directory for log files
        
    Example:
        ```python
        logger = AgentLogger(
            name="math_agent",
            log_dir="logs"
        )
        logger.log_event("tool_called", 
            tool="solve_math",
            input="sqrt(16)",
            result=4.0
        )
        ```
    """
    name: str
    level: int = logging.INFO
    log_dir: Optional[str] = None
    
    def __post_init__(self):
        """Setup console and optional file handlers with formatters."""
        self.logger = logging.getLogger(f"agent.{self.name}")
        self.logger.setLevel(self.level)
        
        # Prevent duplicate handlers
        if not self.logger.handlers:
            self._setup_console_handler()
            if self.log_dir: self._setup_file_handler()


# %% ../01_logger.ipynb 7
@patch
def _get_formatter(self:AgentLogger):
    """Create JSON-structured log formatter with metadata.
    
    Format: [timestamp] logger_name - level - {"event": event_type, "data": {event_data}}
    """
    return logging.Formatter(
        '[%(asctime)s] %(name)s - %(levelname)s - '
        '{"event": "%(event)s", "data": %(message)s}'
    )

@patch
def _setup_console_handler(self:AgentLogger):
    """Configure console output with structured formatting."""
    console = logging.StreamHandler()
    console.setFormatter(self._get_formatter())
    self.logger.addHandler(console)

@patch
def _setup_file_handler(self:AgentLogger):
    """Configure file output with structured formatting and rotation."""
    Path(self.log_dir).mkdir(parents=True, exist_ok=True)
    file_handler = logging.FileHandler(
        Path(self.log_dir)/f"{self.name}.log"
    )
    file_handler.setFormatter(self._get_formatter())
    self.logger.addHandler(file_handler)


# %% ../01_logger.ipynb 9
@patch
def log_event(self:AgentLogger, event:str, **data):
    """Log a structured event with arbitrary data.
    
    Args:
        event: Type of event (e.g., 'prompt_received', 'tool_called')
        **data: Arbitrary key-value pairs for event data
        
    Example:
        ```python
        logger.log_event('tool_called',
            tool_name='solve_math',
            input='sqrt(16)',
            result=4.0,
            execution_time=0.05
        )
        ```
    """
    extra = {'event': event}
    self.logger.info(json.dumps(data), extra=extra)


# %% ../01_logger.ipynb 11
@dataclass
class AgentMetrics:
    """Collect and track agent performance metrics.
    
    Tracks:
    - Token usage
    - Tool calls
    - Response times
    - Success/failure rates
    """
    total_tokens: int = 0
    prompt_tokens: int = 0
    completion_tokens: int = 0
    tool_calls: int = 0
    total_time: float = 0.0
    successful_calls: int = 0
    failed_calls: int = 0

@patch
def log_metrics(self:AgentLogger, metrics:dict):
    """Log accumulated metrics for the agent.
    
    Args:
        metrics: Dictionary of metric names and values
    """
    self.log_event('metrics_update', **metrics)

@patch
def log_completion(self:AgentLogger, chat_completion, execution_time:float):
    """Log metrics from a chat completion response.
    
    Args:
        chat_completion: Response from cosette Chat
        execution_time: Time taken for the complete interaction
    """
    metrics = {
        'tokens': chat_completion.usage,
        'execution_time': execution_time,
        'model': chat_completion.model
    }
    self.log_metrics(metrics)

