"""Our basic extension to cosette to build agentic workflows. This is just base class that defines a decorator to make a function into an "Agent""""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../agents.ipynb.

# %% auto 0
__all__ = ['tool', 'agent']

# %% ../agents.ipynb 2
from fastcore.test import *
from typing import Callable, Any, Dict
from functools import wraps
from cosette import Chat

# %% ../agents.ipynb 4
def tool(f: Callable) -> Callable:
    "Marks a function as a tool that can be used by agents. Returns the decorated function with `is_tool=True`"
    f.is_tool = True
    return f

# %% ../agents.ipynb 5
def agent(role: str) -> Callable:
    "Creates an agent with a specific role and available tools. Returns a decorator that wraps agent functions."
    def _inner(f: Callable) -> Callable:
        @wraps(f)
        def _wrapper(*args, chat=None, **kwargs) -> Dict[str,Any]:
            chat = chat or Chat(model)
            tools = {n:fn for n,fn in f.__globals__.items() if hasattr(fn,'is_tool')}
            chat.system = f"You are a {role}."
            for n,t in tools.items(): chat.add_tool(n,t)
            return f(*args, chat=chat, **kwargs)
        return _wrapper
    return _inner
